/*
 * Copyright 2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.github.hylexus.xtream.codec.ext.jt808.builtin.messages.request;

import io.github.hylexus.xtream.codec.ext.jt808.builtin.messages.BaseCodecTest;
import io.github.hylexus.xtream.codec.ext.jt808.builtin.messages.codec.ParameterItem;
import io.github.hylexus.xtream.codec.ext.jt808.spec.Jt808ProtocolVersion;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

class BuiltinMessage0104Sample2Test extends BaseCodecTest {

    @Test
    void testDecode() throws Exception {
        final BuiltinMessage0104Sample2 entity = decodeAsEntity(BuiltinMessage0104Sample2.class, "010443a20100000000020242609669000800075b00000001040000000a00000002040000003c00000003040000000200000004040000003c00000005040000000200000006040000003c000000070400000002000000100b31333031323334353637300000001105313233343500000012053132333435000000130e3132372e302e302e313a37303030000000140531323334350000001505313233343500000016053132333435000000170531323334350000001a093132372e302e302e310000001b04000004570000001c04000004580000001d093132372e302e302e310000002004000000000000002104000000000000002204000000000000002301300000002401300000002501300000002601300000002704000000000000002804000000000000002904000000000000002c04000003e80000002d04000003e80000002e04000003e80000002f04000003e800000030040000000a0000003102003c000000320416320a1e000000400b3133303132333435363731000000410b3133303132333435363732000000420b3133303132333435363733000000430b3133303132333435363734000000440b3133303132333435363735000000450400000001000000460400000000000000470400000000000000480b3133303132333435363738000000490b313330313233343536373900000050040000000000000051040000000000000052040000000000000053040000000000000054040000000000000055040000003c000000560400000014000000570400003840000000580400000708000000590400001c200000005a040000012c0000005b0200500000005c0200050000005d02000a0000005e02001e00000064040000000100000065040000000100000070040000000100000071040000006f000000720400000070000000730400000071000000740400000072000000751500030190320000002800030190320000002800050100000076130400000101000002020000030300000404000000000077160101000301f43200000028000301f43200000028000500000079032808010000007a04000000230000007b0232320000007c1405000000000000000000000000000000000000000000008004000000240000008102000b000000820200660000008308bea9415830303031000000840101000000900102000000910101000000920101000000930400000001000000940100000000950400000001000001000400000064000001010213880000010204000000640000010302138800000110080000000000000101e6");

        final String hex = encode(entity, Jt808ProtocolVersion.VERSION_2019, "00000000020242609669", 0x0104);
        final BuiltinMessage0104Sample2 entity2 = decodeAsEntity(BuiltinMessage0104Sample2.class, hex.substring(2, hex.length() - 2));

        assertEquals(entity.getFlowId(), entity2.getFlowId());
        assertEquals(entity.getParameterCount(), entity2.getParameterCount());
        assertEquals(entity.getParameterItems().size(), entity2.getParameterItems().size());
        for (int i = 0; i < entity2.getParameterItems().size(); i++) {
            final ParameterItem parameterItem2 = entity2.getParameterItems().get(i);
            final ParameterItem parameterItem = entity.getParameterItems().get(i);
            assertEquals(parameterItem.getParameterValue(), parameterItem2.getParameterValue());
        }

    }
}
